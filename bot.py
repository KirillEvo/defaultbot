import asyncio
import logging

from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command

from sqlite_db import SqliteUserDataManager

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
data = SqliteUserDataManager()

# –¢—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—Ç

from commands import (
    start_command,
    allusers_command
)

# –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–æ –±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import TOKEN

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
main_router = Router()


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã /start
@main_router.message(Command("start"))
async def handle_start(message: types.Message):
    await start_command(message, data)

@main_router.message(Command("users"))
async def handle_users(message: types.Message):
    await allusers_command(message, data)


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    global bot
    bot = Bot(TOKEN)
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(main_router)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
